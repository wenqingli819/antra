using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Threading.Tasks;
using ApplicationCore.Entities;
using ApplicationCore.RepositoryInterfaces;
using Infrastructure.Services;
using Microsoft.VisualStudio.TestTools.UnitTesting;


namespace MovieShop2021.UnitTests
{
    [TestClass]
    public class MovieServiceUnitTest
    {
        private MovieService _sut;


        // SUT System under Test MovieService => Get30HighestGrossing
        [TestMethod]
        public async Task TestListOfHighestGrossingMoviesFromFakeData()
        {
            /*
             AAA, Arrange,Act and Assert
                Arrange: Initialize objects, create mocks with arguments that are passed to the method under test and adds expectations
                Act: Invokes the method or property under test with the arranged parameters
                Assert: Verifies the action of the method under test behaves as expected
            */

            // 1. arrange: mock objects, data, methods etc
            _sut = new MovieService(new MockMovieRepository());

            // 2. act: call the method
            var movies = await _sut.Get30HighestGrossing(); 
             
            // 3. assert: check the actual output with expected value
            
            Assert.IsNotNull(movies); 
        }
    }

    public class MockMovieRepository:IMovieRepository
    {
        public async Task<Movie> GetByIdAsync(int id)
        {
            throw new NotImplementedException();
        }

        public async Task<IEnumerable<Movie>> ListAllAsync()
        {
            throw new NotImplementedException();
        }

        public async Task<IEnumerable<Movie>> ListAsync(Expression<Func<Movie, bool>> filter)
        {
            throw new NotImplementedException();
        }

        public async Task<int> GetCountAsync(Expression<Func<Movie, bool>> filter = null)
        {
            throw new NotImplementedException();
        }

        public async Task<bool> GetExisitAsync(Expression<Func<Movie, bool>> filter = null)
        {
            throw new NotImplementedException();
        }

        public async Task<Movie> AddAsync(Movie entity)
        {
            throw new NotImplementedException();
        }

        public async Task<Movie> UpdateAsync(Movie entity)
        {
            throw new NotImplementedException();
        }

        public async Task DeleteAsync(Movie entity)
        {
            throw new NotImplementedException();
        }

        public async Task<IEnumerable<Movie>> GetTop30HighestGrossingMovies()
        {
            // get the fake data
            var movies = new List<Movie>
            {
                new Movie {Id = 1, Title = "Avengers: Infinity War", Budget = 1200000},
                new Movie {Id = 1, Title = "Avengers: Infinity War", Budget = 1200000},
                new Movie {Id = 2, Title = "Avatar", Budget = 1200000},
                new Movie {Id = 3, Title = "Star Wars", Budget = 1200000},
                new Movie {Id = 4, Title = "Titanic", Budget = 1200000},
                new Movie {Id = 5, Title = "Inception", Budget = 1200000},
                new Movie {Id = 6, Title = "Avengers: Age of Ultron", Budget = 1200000},
                new Movie {Id = 7, Title = "Interstellar", Budget = 1200000},
                new Movie {Id = 8, Title = "Fight Club", Budget = 1200000},
                new Movie {Id = 9, Title = "The Lord of the Rings: The Fellowship of the Ring", Budget = 1200000}
            };
            return movies;
        }

        public async Task<IEnumerable<Movie>> GetMoviesByGenreId(int genreId)
        {
            throw new NotImplementedException();
        }

        public async Task<double> GetAvgRatingByMovieId(int id)
        {
            throw new NotImplementedException();
        }

        public async Task<Movie> GetMovieDetailById(int id)
        {
            throw new NotImplementedException();
        }
    }
}
